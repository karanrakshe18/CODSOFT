#include <iostream>
#include <vector>
#include<iomanip>
using namespace std;
struct Task {
    string description;
    bool isCompleted;
};
// Function prototypes
void addTask(vector<Task>& tasks);
void viewTasks(const vector<Task>& tasks);
void markAsCompleted(vector<Task>& tasks);
void removeTask(vector<Task>& tasks);

int main() {
    vector<Task> tasks;

    int choice;
    do {
        cout << "To-Do List Manager\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markAsCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 0:
                cout << "Exiting the program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 0);

    return 0;
}
void addTask(vector<Task>& tasks) {
    Task newTask;
    cout << "Enter task description: ";
    cin.ignore();
    getline(cin, newTask.description);
    newTask.isCompleted = false;

    tasks.push_back(newTask);
    cout << "Task added successfully!\n";
}
void viewTasks(const vector<Task>& tasks) {
    cout << "\nTo-Do List:\n";
    if (tasks.empty()) {
        cout << "No tasks available.\n";
    } else {
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << setw(3) << i + 1 << ". ";
            cout << (tasks[i].isCompleted ? "[X] " : "[ ] ");
            cout << tasks[i].description << "\n";
        }
    }
}
void markAsCompleted(vector<Task>& tasks) {
    viewTasks(tasks);

    if (tasks.empty()) {
        cout << "No tasks available to mark as completed.\n";
        return;
    }

    int taskIndex;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskIndex;

    if (taskIndex >= 1 && taskIndex <= static_cast<int>(tasks.size())) {
        tasks[taskIndex - 1].isCompleted = true;
        cout << "Task marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}
void removeTask(vector<Task>& tasks) {
    viewTasks(tasks);

    if (tasks.empty()) {
        cout << "No tasks available to remove.\n";
        return;
    }

    int taskIndex;
    cout << "Enter the task number to remove: ";
    cin >> taskIndex;

    if (taskIndex >= 1 && taskIndex <= static_cast<int>(tasks.size())) {
        tasks.erase(tasks.begin() + taskIndex - 1);
        cout << "Task removed successfully.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}
